/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.squareup.connect.models.MeasurementUnit;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Contains the measurement unit for a quantity and a precision which specifies the number of digits after the decimal point for decimal quantities.
 */
@ApiModel(description = "Contains the measurement unit for a quantity and a precision which specifies the number of digits after the decimal point for decimal quantities.")

public class OrderQuantityUnit {
  @JsonProperty("measurement_unit")
  private MeasurementUnit measurementUnit = null;

  @JsonProperty("precision")
  private Integer precision = null;

  public OrderQuantityUnit measurementUnit(MeasurementUnit measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

   /**
   * A [MeasurementUnit](#type-measurementunit) that represents the unit of measure for the quantity.
   * @return measurementUnit
  **/
  @ApiModelProperty(value = "A [MeasurementUnit](#type-measurementunit) that represents the unit of measure for the quantity.")
  public MeasurementUnit getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(MeasurementUnit measurementUnit) {
    this.measurementUnit = measurementUnit;
  }

  public OrderQuantityUnit precision(Integer precision) {
    this.precision = precision;
    return this;
  }

   /**
   * For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities like `\"1.0\"` and `\"1.1\"`, but not `\"1.01\"`.  Min: 0. Max: 5.  Orders Hub and older versions of Connect do not support non-integer quantities. See [Decimal quantities with Orders hub and older versions of Connect](/more-apis/orders/overview#decimal-quantities).
   * @return precision
  **/
  @ApiModelProperty(value = "For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities like `\"1.0\"` and `\"1.1\"`, but not `\"1.01\"`.  Min: 0. Max: 5.  Orders Hub and older versions of Connect do not support non-integer quantities. See [Decimal quantities with Orders hub and older versions of Connect](/more-apis/orders/overview#decimal-quantities).")
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderQuantityUnit orderQuantityUnit = (OrderQuantityUnit) o;
    return Objects.equals(this.measurementUnit, orderQuantityUnit.measurementUnit) &&
        Objects.equals(this.precision, orderQuantityUnit.precision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(measurementUnit, precision);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderQuantityUnit {\n");
    
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

