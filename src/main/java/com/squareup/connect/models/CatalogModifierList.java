/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.squareup.connect.models.CatalogObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * A modifier list in the Catalog object model. A &#x60;CatalogModifierList&#x60; contains &#x60;CatalogModifier&#x60; objects that can be applied to a &#x60;CatalogItem&#x60; at the time of sale.  For example, a modifier list \&quot;Condiments\&quot; that would apply to a \&quot;Hot Dog\&quot; &#x60;CatalogItem&#x60; might contain &#x60;CatalogModifier&#x60;s \&quot;Ketchup\&quot;, \&quot;Mustard\&quot;, and \&quot;Relish\&quot;. The &#x60;selection_type&#x60; field specifies whether or not multiple selections from the modifier list are allowed.
 */
@ApiModel(description = "A modifier list in the Catalog object model. A `CatalogModifierList` contains `CatalogModifier` objects that can be applied to a `CatalogItem` at the time of sale.  For example, a modifier list \"Condiments\" that would apply to a \"Hot Dog\" `CatalogItem` might contain `CatalogModifier`s \"Ketchup\", \"Mustard\", and \"Relish\". The `selection_type` field specifies whether or not multiple selections from the modifier list are allowed.")

public class CatalogModifierList {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("selection_type")
  private String selectionType = null;

  @JsonProperty("modifiers")
  private List<CatalogObject> modifiers = new ArrayList<CatalogObject>();

  public CatalogModifierList name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A searchable name for the `CatalogModifierList`. This field has max length of 255 Unicode code points.
   * @return name
  **/
  @ApiModelProperty(value = "A searchable name for the `CatalogModifierList`. This field has max length of 255 Unicode code points.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CatalogModifierList selectionType(String selectionType) {
    this.selectionType = selectionType;
    return this;
  }

   /**
   * Indicates whether multiple options from the `CatalogModifierList` can be applied to a single `CatalogItem`. See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
   * @return selectionType
  **/
  @ApiModelProperty(value = "Indicates whether multiple options from the `CatalogModifierList` can be applied to a single `CatalogItem`. See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values")
  public String getSelectionType() {
    return selectionType;
  }

  public void setSelectionType(String selectionType) {
    this.selectionType = selectionType;
  }

  public CatalogModifierList modifiers(List<CatalogObject> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public CatalogModifierList addModifiersItem(CatalogObject modifiersItem) {
    this.modifiers.add(modifiersItem);
    return this;
  }

   /**
   * The options included in the `CatalogModifierList`. You must include at least one `CatalogModifier`. Each CatalogObject must have type `MODIFIER` and contain `CatalogModifier` data.
   * @return modifiers
  **/
  @ApiModelProperty(value = "The options included in the `CatalogModifierList`. You must include at least one `CatalogModifier`. Each CatalogObject must have type `MODIFIER` and contain `CatalogModifier` data.")
  public List<CatalogObject> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<CatalogObject> modifiers) {
    this.modifiers = modifiers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogModifierList catalogModifierList = (CatalogModifierList) o;
    return Objects.equals(this.name, catalogModifierList.name) &&
        Objects.equals(this.selectionType, catalogModifierList.selectionType) &&
        Objects.equals(this.modifiers, catalogModifierList.modifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, selectionType, modifiers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogModifierList {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    selectionType: ").append(toIndentedString(selectionType)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

