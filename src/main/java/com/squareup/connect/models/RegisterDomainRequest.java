/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Defines the parameters that can be included in the body of a request to the __RegisterDomain__ endpoint.
 */
@ApiModel(description = "Defines the parameters that can be included in the body of a request to the __RegisterDomain__ endpoint.")

public class RegisterDomainRequest {
  @JsonProperty("domain_name")
  private String domainName = null;

  public RegisterDomainRequest domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * A domain name as described in RFC-1034 that will be registered with ApplePay
   * @return domainName
  **/
  @ApiModelProperty(required = true, value = "A domain name as described in RFC-1034 that will be registered with ApplePay")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterDomainRequest registerDomainRequest = (RegisterDomainRequest) o;
    return Objects.equals(this.domainName, registerDomainRequest.domainName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterDomainRequest {\n");
    
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

